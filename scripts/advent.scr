/*
    Trying to build a minimal thing like the Colossal Cave Adventure,
    to test drive my interpreter, and have some fun along the way.
*/

maze = {
    rooms: [],
};

function make_room() {
    descriptions = ["big", "huge", "tall", "enormous", "narrow", "low-ceiling"];
    nouns = ["room", "hall", "corridor", "passage"];
    descr = descriptions[rand() % 6] + " " + nouns[rand() % 4];
    exits = [
        rand() & 1 > 0,
        rand() & 1 > 0,
        rand() & 1 > 0,
        rand() & 1 > 0
    ];
    room = {descr:descr, exits:exits};
    output("Room is:", room);
    return room;
}
function make_maze() {
    num_rooms = rand() % 20;
    for (i = 0; i < num_rooms; i++) {
        room = make_room();
        maze.rooms.add(room);
        // recursively connect exits to other rooms
        // how to add to a list? 
        // how to add to a dict?
        // how to walk a dict?
        // how to see if a key exists in a dictionary
    }
}

// -----------------------------

function print_maze() {
}
function present_room() {
    // must have current room, describe it.
}

function get_command() {
    output("Enter command, 'h' for help, or 'q' to quit");
    x = input();
    return x;
}

function do_help() {
    output("Enter various commands in semi natural language. Usual format is <verb> <noun>. Good luck!");
}
function do_debug() {
    output("maze:");
    output(maze);
}

function handle_command(cmd) {
    if (cmd == "help" || cmd == "h") {
        do_help();
    } else if (cmd == "debug") {
        do_debug();
    } else if (cmd == "rand") {
        output("A random number is", rand());
    } else {
        output("I don't know this");
    }
}

function establish_seed() {
    output("Enter seed for specific game, or press enter for random game");
    s = input();
    if (strlen(s) == 0) {
        srand(0);
        s = str(rand() % 10000);
    }
    
    seed = int(s);
    output("Using " + str(seed) + " as a seed");
    srand(int(s));
}

function main() {
    establish_seed();
    output("Preparing game...");
    make_maze();
    
    while (true) {
        present_room();
        cmd = get_command();
        if (cmd == "q" || cmd == "quit")
            break;
        handle_command(cmd);
    }

    return 0;
}

main();
