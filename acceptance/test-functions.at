
# simple function
code ```
    function a() {
        log("inside a");
    }
    a();
    a();
```
expect log ```
    inside a
    inside a
```

----------------------------------------------------

# pass argument
code ```
    function a(x) {
        log("inside a, x is", x);
    }
    a(1);
    a(2);
```
expect log ```
    inside a, x is 1
    inside a, x is 2
```

----------------------------------------------------

# pass argument, grab result
code ```
    function a(x, y) {
        log("inside a, x=" + str(x) + ", y=" + str(y));
        return x * y;
    }
    x = a(2, 3);
    log("a() returned " + str(x));
```
expect log ```
    inside a, x=2, y=3 
    a() returned 6
```

----------------------------------------------------

# expression function. notice the semicolor after it.
code ```
    a = function () { return 2; };
    return a();
```
expect result 2

----------------------------------------------------

# return function from function
code ```
    function make_function() {
        return function() { 
            return 5;
        };
    }
    a = make_function();
    b = a;
    return b() * 2;
```
expect result 10

----------------------------------------------------

# closure captures environment
code ```
    function make_multiplier(multi) {
        return function(arg) { 
            return arg * multi;
        };
    }
    m = make_multiplier(3);
    x = m(4);
    return x;
```
expect result 12

----------------------------------------------------

# closure modify the copies of captured variables
code ```
    function make_generator(start, step) {
        return function() { 
            new_value = start;
            start = start + step;
            return new_value;
        };
    }

    g = make_generator(5, 5);
    for (i = 0; i < 4; i++)
        log(g());
```
expect log ```
5
10
15
20
```

----------------------------------------------------




